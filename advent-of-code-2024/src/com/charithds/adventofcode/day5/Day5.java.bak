package com.charithds.adventofcode.day5;

import com.charithds.adventofcode.TaskInt;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;

class InputData {
    private final List<Integer[]> pairs;
    private final List<List<Integer>> numbers;

    InputData(List<Integer[]> pairs, List<List<Integer>> numbers) {
        this.pairs = pairs;
        this.numbers = numbers;
    }

    public List<List<Integer>> getNumbers() {
        return numbers;
    }

    public List<Integer[]> getPairs() {
        return pairs;
    }
}

public class Day5 implements TaskInt {

    private static final String DAY5_FILE = "resources/day5.dat";
//    private static final String DAY5_FILE = "resources/day5-sample.dat";

    private InputData getInput() {
        try (
            var lines = Files.lines(Paths.get(DAY5_FILE))
        ) {
            InputData inputData = new InputData(new ArrayList<>(), new ArrayList<>());
            lines.forEach(line -> {

                if (line.contains("|")) {
                    inputData.getPairs().add(
                            Arrays.stream(line.split("\\|")).map(Integer::parseInt).toArray(Integer[]::new));
                } else if (line.contains(",")) {
                    inputData.getNumbers().add(Arrays.stream(line.split(","))
                            .map(String::trim)
                            .map(Integer::parseInt)
                            .toList());
                }
                // Process each line if needed
            });
            return inputData;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void dfs(Integer node, Map<Integer, List<Integer>> graph, Set<Integer> visited, Stack<Integer> result, Set<Integer> cycleCheck) {
        if (cycleCheck.contains(node)) {
            System.out.println("Cycle detected at node: " + node);
            return;
        }
        visited.add(node);
        cycleCheck.add(node);
        for (int neighbor : graph.getOrDefault(node, new LinkedList<>())) {
            if (!visited.contains(neighbor)) {
                dfs(neighbor, graph, visited, result, cycleCheck);
            }
        }
        cycleCheck.remove(node);
        result.push(node);
    }

    private boolean isValid(List<Integer> given, List<Integer> topologicalOrder) {
        System.out.println("Given: " + given);
        System.out.println("Topological Order: " + topologicalOrder);
        List<Integer> filteredTopOrder = topologicalOrder.stream()
                .filter(given::contains)
                .collect(Collectors.toList());

        return filteredTopOrder.equals(given);
    }

    @Override
    public void execute() {
        InputData input = getInput();

        if (input == null) {
            System.out.println("Failed to read input data.");
            return;
        }

        Map<Integer, List<Integer>> graph = new HashMap<>();
        Map<Integer, Integer> indegree = new HashMap<>();


        input.getPairs().stream().forEach(p -> {
            int a = p[0];
            int b = p[1];

            graph.putIfAbsent(a, new LinkedList<>());
            graph.get(a).add(b);

            indegree.putIfAbsent(a, 0);
            indegree.putIfAbsent(b, 0);

            indegree.put(b, indegree.get(b) + 1);

        });

        {
            Stack<Integer> stack = new Stack<>();
            Set<Integer> visited = new HashSet<>();

            dfs(graph.keySet().stream().iterator().next(), graph, visited, stack, new HashSet<>());

            List<Integer> ans = stack.stream().collect(Collectors.toList());
            Collections.reverse(ans);

            System.out.println("All nodes " + graph.keySet().size());
            System.out.println("ans " + ans);


            System.out.println(graph);

        }

        long sum = 0;
        for (List<Integer> testCase : input.getNumbers()) {
            Stack<Integer> stack = new Stack<>();
            Set<Integer> visited = new HashSet<>();
            Set<Integer> cycleCheck = new HashSet<>();

            dfs(testCase.get(0), graph, visited, stack, cycleCheck);

            List<Integer> ans = stack.stream().collect(Collectors.toList());
            Collections.reverse(ans);

            boolean isValid = isValid(testCase, ans);

            if (isValid) {
                sum += testCase.get((testCase.size() + 1) / 2 - 1);
            }
            System.out.println("Test case: " + testCase + " is valid: " + isValid);
            System.out.println();


        }
        System.out.println("Sum of valid test cases: " + sum);
    }

}
